const listTasksContainerElement = document.getElementById('list-tasks-container');
let currentTab = 'all'; // done | undone
let isCheckAll = true;
let storageKey = 'todoList';
let owner;
let userFieldIndex = [];
login();

// Check xem n·∫øu trong tr∆∞·ªùng h·ª£p kh√¥ng c√≥ g√¨: null th√¨ ph·∫£i tr·ªü v·ªÅ string []. v√¨ n·∫øu localStorage ch·ªâ nh·∫≠n string
let todoList = JSON.parse(localStorage.getItem(storageKey)) ? JSON.parse(localStorage.getItem(storageKey)) : [];
// T·∫°o 1 m·∫£ng ƒë·ªÉ l∆∞u nh·ªØng content !== v·ªõi searchTasksContent
let hiddenItemIndexes = [];
updateView();

function updateView() {
    // Xo√° d·ªØ li·ªáu c≈© v√† update l·∫°i data t·ª´ updateTodoListView()
    listTasksContainerElement.innerHTML = '';
    updateTodoListView();
}

let pressEnterAdd = document.getElementById('myListContent');
// B·∫Øt s·ª± ki·ªán khi nh·∫•n Enter
pressEnterAdd.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        addContentElement();
    }
});

function updateTodoListView(task) {
    let count = 0;
    const taskCount = document.getElementById('total');
    const taskDone = document.getElementById('done');
    const taskNotDone = document.getElementById('notDone');
    for (task of todoList) {
        if(task.status) {
            ++count;
        }
    }
    taskCount.innerHTML = 'T·∫•t c·∫£: ' + todoList.length;
    taskDone.innerHTML = 'ƒê√£ ho√†n th√†nh: ' + count;
    taskNotDone.innerHTML = 'Ch∆∞a ho√†n th√†nh: ' + (todoList.length - count);
    // ƒê·∫øm ƒë·ªô d√†i c·ªßa m·∫£ng todoList r·ªìi check n·∫øu check sang all s·∫Ω hi·ªán t·∫•t c·∫£, done s·∫Ω hi·ªán ƒë√£ l√†m, kh√¥ng th√¨ ng∆∞·ª£c l·∫°i
    for (let i = 0; i < todoList.length; i++) {
        // T√¨m v·ªã tr√≠ c·ªßa i trong hiddenItemIndexes n·∫øu !== -1 th√¨ ti·∫øp t·ª•c v√≤ng l·∫∑p, c√≥ th√¨ hi·ªÉn th·ªã n·∫øu ko c√≥ th√¨ ·∫©n ƒëi
        if (hiddenItemIndexes.indexOf(i) !== -1) {
            continue;
        }
        if (currentTab === 'done' && todoList[i].status) {
            addOneTaskView(todoList[i]);
        } else if (currentTab === 'undone' && !todoList[i].status) {
            addOneTaskView(todoList[i]);
        } else if (currentTab === 'all') {
            addOneTaskView(todoList[i]);
        }
    }
}
// Th√™m m·ªôt TaskView v√†o todoList
function addOneTaskView(task) {
    let division = document.createElement('div'); // create div
    textNode = document.createTextNode(task.content); // create text node
    division.appendChild(textNode);
    listTasksContainerElement.appendChild(division);
    // D√πng localStorage ƒë·ªÉ l∆∞u data. setItem l√† 1 ph∆∞∆°ng th·ª©c v√† l√† 1 function n√™n ph·∫£i truy·ªÅn v√†o 2 tham s·ªë
    localStorage.setItem(storageKey, JSON.stringify(todoList)); // 2 tham s·ªë truy·ªÅn v√†o l√†: 1 Key (key mu·ªën l∆∞u) | 2: l√† gi√° tr·ªã  
    createStaticCheckBox(division, task);
    createDeleteElement(division, task); 
    createOnTopElement(division, task);
    createBottomElement(division, task);
    createUpElement(division, task);
    createDownElement(division, task);
    // updateCountTaskView();    
}
// V√¥ hi·ªáu h√≥a button add n·∫øu ƒë·ªÉ tr·ªëng.
myDiv.addEventListener('input', function() {
    if (myListContent.value.length >= 1) {
        myBtn.removeAttribute('disabled');
    } else {
        myBtn.setAttribute('disabled', 'disabled');
    }
});
function addContentElement() {
    let listTasksContent = document.getElementById('myListContent').value;
    //N·∫øu input r·ªóng th√¨ button add s·∫Ω kh√¥ng ho·∫°t ƒë·ªông
    if (listTasksContent === '') {
        alert('L·ªói. Nh·∫≠p l·∫°i');
        return;
    }
    // N·∫øu tr√πng c√¥ng i·ªác th√¨ nh·∫≠p l·∫°i
    for (let i = 0; i < todoList.length; i++) {
        if (listTasksContent === todoList[i].content) {
            alert('Nh·∫≠p l·∫°i');
            // delete gi√° tr·ªã th·∫ª input sau khi nh·∫≠p
            document.getElementById('myListContent').value = '';
            return;
        }
    }
    const newTask = {content: listTasksContent, status: false, owner: owner}
    todoList.push(newTask); 
    // delete gi√° tr·ªã th·∫ª input sau khi nh·∫≠p
    document.getElementById('myListContent').value = '';
    updateView(); 
}    
// T·∫°o checkbox
function createStaticCheckBox(division, task) {
    let checkBox = document.createElement('input'); // check done/ not done
    checkBox.setAttribute('type', 'checkbox');// set checkBoxElement type = checkbox
    division.prepend(checkBox);
    if (task.status) {
        checkBox.setAttribute('checked', true);
        division.style.color = 'blue';
        division.style.textDecoration = 'line-through';
    } else {
        division.style.color = 'black';
    }
    // Khi checkbox ƒë∆∞·ª£c click th√¨ g·ªçi h√†m 
    checkBox.addEventListener('change', function(e){
        // Target Nh·∫≠n ph·∫ßn t·ª≠ cu·ªëi c√πng khi click v√†o checkbox
        task.status = e.target.checked;
        const taskIndex = todoList.indexOf(task);
        todoList.splice(taskIndex, 1);
        if (task.status) {
            // N·∫øu tich v√†o checkbox th√¨ truy·ªÅn task v√†o todoList t·ª©c l√† xu·ªëng cu·ªëi
            todoList.push(task);
        } else {
            // N·∫øu kh√¥ng th√¨ ng∆∞·ª£c l·∫°i ƒë∆∞a l·∫°i l√™n ƒë·∫ßu
            todoList.unshift(task);
        }
        updateView();
    });
}
// T·∫°o button delete
function createDeleteElement(division, task) {
    // T·∫°o button - n√∫t delete
    let taskDelete = document.createElement('button');
    taskDelete.className = 'my-delete-element';
    // Th√™m n√∫t delete v√†o sau division
    division.append(taskDelete);
    taskDelete.innerHTML = 'üóëÔ∏è';
    // D√πng addEventListener ƒë·ªÉ add s·ª± ki·ªán cho ƒë·ªëi t∆∞·ª£ng (Xo√° division)
    taskDelete.addEventListener('click', function(event){
        // N·∫øu nh·∫•n ƒë·ªìng √Ω (ch·∫Øc ch·∫Øn u·ªën xo√°) th√¨ s·∫Ω ch·∫°y ti·∫øp 
        const confirmation = confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° kh√¥ng');
        if(!confirmation) return;
        // T√¨m v·ªã tr√≠ c·ªßa task trong todoList
        const taskIndex = todoList.indexOf(task);
        // D√πng Splice ƒë·ªÉ xo√° ph·∫ßn t·ª≠ ƒë∆∞·ª£c x√°c ƒë·ªãnh taskIndex trong m·∫£ng 
        todoList.splice(taskIndex, 1);
        updateView();        
    });
}
// T·∫°o ch·ª©c nƒÉng l√™n tr√™n c√πng cho m·ªôt element
function createOnTopElement(division, task) {
    // T·∫°o button l√™n top
    let taskTopElement = document.createElement('button');
    // T√™n class c·ªßa button
    taskTopElement.className = 'my-top-element';
    taskTopElement.innerHTML = 'Top';
    division.append(taskTopElement);
    // N·∫øu v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ === 0 th√¨ taskTopElement true c√≤n kh√¥ng th√¨ tr·∫£ v·ªÅ false
    if (todoList.indexOf(task) === 0) {
        taskTopElement.disabled = true;
    }
    // N·∫øu click v√†o button th√¨ s·∫Ω ƒë∆∞a element l√™n tr√™n ƒë·∫ßu divison
    taskTopElement.addEventListener('click', function(){
        // T√¨m v·ªã tr√≠ c·ªßa task trong todoList
        const taskIndex = todoList.indexOf(task);
        // D√πng Splice ƒë·ªÉ xo√° ph·∫ßn t·ª≠ ƒë∆∞·ª£c x√°c ƒë·ªãnh taskIndex trong m·∫£ng 
        todoList.splice(taskIndex, 1);
        // ƒê∆∞a task l√™n ƒë·∫ßu m·∫£ng todoList
        todoList.unshift(task);
        updateView();
        // Sau khi l√™n ƒë·∫ßu th√¨ vo hi·ªáu ho√° button ƒë√≥
    });
}
// T·∫°o ch·ª©c nƒÉng xu·ªëng cu·ªëi c√πng cho m·ªôt Element
function createBottomElement(division, task) {
    // T·∫°o button bottom
    let taskBotElement = document.createElement('button');
    // T√™n class c·ªßa button
    taskBotElement.className = 'my-bot-element';
    taskBotElement.innerHTML = 'Bot';
    division.prepend(taskBotElement);
    // V√¥ hi·ªáu ho√° bottpom khi ·ªü v·ªã tr√≠ d∆∞·ªõi c√πng c·ªßa todoList
    if (todoList.indexOf(task) === todoList.length - 1) {    
        taskBotElement.disabled = true;
    }
    // B·∫Øt s·ª± ki·ªán button ƒë∆∞a element xu·ªëng cu·ªëi c√πng
    taskBotElement.addEventListener('click', function(){
        // t√¨m v·ªã tr√≠ c·ªßa task trong todoList
        const taskIndex = todoList.indexOf(task);
        // D√πng Splice ƒë·ªÉ xo√° ph·∫ßn t·ª≠ ƒë∆∞·ª£c x√°c ƒë·ªãnh taskIndex trong m·∫£ng
        todoList.splice(taskIndex, 1);
        // ƒê∆∞a tas xu·ªëng cu·ªëi c√πng m·∫£ng
        todoList.push(task);
        updateView();
    });
}
// T·∫°o ch·ª©c nƒÉng ti·∫øn l√™n 1 b·∫≠c cho todoList
function createUpElement(division, task) {
    // T·∫°o button Up
    let taskUpElement = document.createElement('button');
    // T√™n class c·ªßa button
    taskUpElement.className = 'my-before-element';
    taskUpElement.innerHTML = 'Up';
    division.prepend(taskUpElement);
    // V√¥ hi·ªáu ho√° Up khi t·ªõi v·ªã tr√≠ tr√™n c√πng
    if (todoList.indexOf(task) === 0) {
        taskUpElement.disabled = true;
    }
    // B·∫Øt s·ª± ki·ªán button ƒë∆∞a element l√™n
    taskUpElement.addEventListener('click', function(){
        // T√¨m v·ªã tr√≠ c·ªßa task trong todoList
        const taskIndex = todoList.indexOf(task);
        // D√πng ƒë·∫£o v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ trong m·∫£ng
        let temp = todoList[taskIndex];
        todoList[taskIndex] = todoList[taskIndex - 1];
        todoList[taskIndex - 1] = temp;
        updateView();
    });
}
// T·∫°o ch·ª©c nƒÉng xu·ªëng 1 b·∫≠c cho todolist
function createDownElement(division, task) {
    // T·∫°o button down
    let taskDownElement = document.createElement('button');
    // Teen class cuar button
    taskDownElement.className = 'my-down-element';
    taskDownElement.innerHTML = 'Down';
    division.prepend(taskDownElement);
    // V√¥ hi·ªáu ho√° Down khi ƒëi t·ªõi v·ªã tr√≠ cu·ªëi c√πng
    if (todoList.indexOf(task) === todoList.length - 1) {    
        taskDownElement.disabled = true;
    }
    // B·∫Øt s·ª± ki·ªán button ƒë∆∞a element xu·ªëng
    taskDownElement.addEventListener('click', function(){
        // T√¨m v·ªã tr√≠ c·ªßa task trong todoList
        const taskIndex = todoList.indexOf(task);
        // D√ông ƒë·∫£o v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ trong m·∫£ng
        let temp = todoList[taskIndex];
        todoList[taskIndex] = todoList[taskIndex + 1];
        todoList[taskIndex + 1] = temp;
        updateView();
    });
}

// Hi·ªán t·∫•t c·∫£ c√¥ng vi·ªác 
function totalTaskElement() {
    currentTab = 'all';
    updateView();
}
// Hi·ªán t·∫•t c·∫£ c√¥ng vi·ªác ƒë√£ ho√†n th√†nh
function doneTaskElement() {
    currentTab = 'done';
    updateView();
}
// Hi·ªán t·∫•t c·∫£ c√¥ng vi·ªác ch∆∞a ho√†n th√†nh
function notDoneTaskElement() {
    currentTab = 'undone';
    updateView();
}
// Ch·ªçn t·∫•t c·∫£ c√°c task v√† hu·ª∑ ch·ªçn
function createAllCheckBox() {
    const buttonCheckAll = document.getElementById('btn-check-all');
    for (let i = 0; i < todoList.length; i++) 
    {
        if (isCheckAll)  // N·∫øu l√† isCheckAll (T·ª©c true) th√¨ todoList[i].status = true;
        {
            todoList[i].status = true;
        } else {
            todoList[i].status = false;
        }
    }
    isCheckAll = !isCheckAll; // N·∫øu !isCheckAll (T·ª©c false) th√¨ todoList[i].status = false;
    buttonCheckAll.innerHTML = isCheckAll ? 'Ch·ªçn t·∫•t c·∫£' : 'B·ªè ch·ªçn t·∫•t c·∫£';
    updateView();  
}
// Button xo√° t·∫•t c·∫£ c√°c task
function createRemoveAllTask() {
    const confirmation = confirm('B·∫°n c√≥ mu·ªën xo√° h·∫øt');
    if(!confirmation) return;
    // Xo√° t·ª´ v·ªã tr√≠ 0 ƒë·∫øn v·ªã tr√≠ cu·ªëi c√πng (l√† ƒë·ªô d√†i m·∫£ng todoList.length) 
    todoList.splice(0, todoList.length);
    updateView();
}

// Search c√¥ng vi·ªác 
function searchTask() {
    hiddenItemIndexes = [];
    // L·∫•y n·ªôi dung c·∫ßn t√¨m trong input search
    let searchTasksContent = document.getElementById('mySearch').value;
    if (searchTasksContent === '') {
        hiddenItemIndexes = [];
        updateView();
        return;
    }
    for (let i = 0; i < todoList.length; i++) {
        // N·∫øu trong todoList n·ªôi dung n√†o kh√¥ng gi·ªëng v·ªõi searchTasksContent th√¨ ƒë∆∞a v√†o hiddenItemIndexes
        if (!todoList[i].content.toUpperCase().includes(searchTasksContent.toUpperCase())) {
            hiddenItemIndexes.push(i);
        }
    }
    updateView();
}
// Th√™m ch·ª©c nƒÉng ng∆∞·ªùi d√πng
function login() { 
    owner = prompt('Nh·∫≠p t√™n ng∆∞·ªùi d√πng: ');
    document.getElementById('myOwner').innerHTML = 'Ng∆∞·ªùi d√πng: ' + owner;
    if (!owner) {
        login();
    }
}
